---
import pino from "pino-http";
import dayjs from "dayjs";
import Pencil from "../../img/Pencil";
import IngenUtkast from "../ingen/IngenUtkast.astro";
import Error from "../error/Error.astro";
import { utkastApiUrl } from "../../utils/server/urls";
import { BodyLong, BodyShort, Heading } from "@navikt/ds-react";
import { text } from "../../language/text";
import { ChevronRightIcon } from "@navikt/aksel-icons";
import { sortByOpprettet } from "../../utils/server/sorting";
import { getOboToken } from "../../utils/server/token";
import type { Language } from "../../language/language";
import type { UtkastElement } from "./UtkastTypes.ts";
import styles from "./Utkast.module.css";

interface Props {
  language: Language;
}

const oboToken = await getOboToken(Astro.locals.token);
const logger = pino().logger;
const { language } = Astro.props;
let isError = false;

const data = await fetch(utkastApiUrl, {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: `Bearer ${oboToken}`,
  },
})
  .then((response) => {
    if (!response.ok) {
      logger.error(`Error, fetch failed with status: ${response.status}`);
      isError = true;
    }

    return response.json();
  })
  .catch((error) => {
    logger.error(`Error, fetch failed: ${error}`);
    isError = true;
  });

const dateFormatter = (date: string) => dayjs(date).format("DD.MM.YYYY");
---

<>
  {
    isError ? (
      <Error language={language} />
    ) : data?.length == 0 ? (
      <IngenUtkast language={language} />
    ) : (
      <ul class={styles.utkastList}>
        {data?.sort(sortByOpprettet).map((utkast: UtkastElement) => (
          <li class={styles.container}>
            <a
              href={utkast.link}
              class={styles.link}
              data-umami-event="{utkast-Ã¥pnet}"
            >
              <div class={styles.top}>
                <div class={styles.wrapper}>
                  <div class={styles.ikon}>
                    <Pencil aria-hidden={true} />
                  </div>
                  <BodyShort size="medium" className={styles.utkastNavn}>
                    {text.utkast[language]}
                  </BodyShort>
                </div>
                <div class={`${styles.wrapper} ${styles.endretTekst}`}>
                  <BodyLong size="small">
                    {text.opprettet[language] + dateFormatter(utkast.opprettet)}
                  </BodyLong>
                  <ChevronRightIcon
                    className={styles.chevron}
                    fontSize="1.25rem"
                    aria-hidden={true}
                    aria-label="Chevron"
                  />
                </div>
              </div>
              <div class={styles.bottom}>
                <Heading
                  size="xsmall"
                  level="2"
                  className={styles.utkastTittel}
                >
                  {utkast.tittel}
                </Heading>
              </div>
            </a>
          </li>
        ))}
      </ul>
    )
  }
</>
